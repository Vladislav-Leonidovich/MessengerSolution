// <auto-generated />
using System;
using ChatService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatService.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChatService.Models.ChatOperation", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CancelReason")
                        .HasColumnType("longtext");

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperationData")
                        .HasColumnType("longtext");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CorrelationId");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.ToTable("ChatOperations", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChatRoomType")
                        .HasColumnType("int");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("ChatRooms", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ChatService.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Folders", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.GroupChatMember", b =>
                {
                    b.Property<int>("GroupChatRoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("GroupChatRoomId", "UserId");

                    b.ToTable("GroupChatMembers", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Error")
                        .HasColumnType("longtext");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ProcessedAt");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.UserChatRoom", b =>
                {
                    b.Property<int>("PrivateChatRoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrivateChatRoomId", "UserId");

                    b.ToTable("UserChatRooms", (string)null);
                });

            modelBuilder.Entity("Shared.Contracts.ProcessedEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EventType")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EventId", "EventType");

                    b.HasIndex("ProcessedAt");

                    b.ToTable("ProcessedEvents", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.GroupChatRoom", b =>
                {
                    b.HasBaseType("ChatService.Models.ChatRoom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.ToTable("GroupChatRooms", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.PrivateChatRoom", b =>
                {
                    b.HasBaseType("ChatService.Models.ChatRoom");

                    b.ToTable("PrivateChatRooms", (string)null);
                });

            modelBuilder.Entity("ChatService.Models.ChatOperation", b =>
                {
                    b.HasOne("ChatService.Models.ChatRoom", null)
                        .WithMany("Operations")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatService.Models.ChatRoom", b =>
                {
                    b.HasOne("ChatService.Models.Folder", "Folder")
                        .WithMany("ChatRooms")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("ChatService.Models.GroupChatMember", b =>
                {
                    b.HasOne("ChatService.Models.GroupChatRoom", "GroupChatRoom")
                        .WithMany("GroupChatMembers")
                        .HasForeignKey("GroupChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChatRoom");
                });

            modelBuilder.Entity("ChatService.Models.UserChatRoom", b =>
                {
                    b.HasOne("ChatService.Models.PrivateChatRoom", "PrivateChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("PrivateChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivateChatRoom");
                });

            modelBuilder.Entity("ChatService.Models.GroupChatRoom", b =>
                {
                    b.HasOne("ChatService.Models.ChatRoom", null)
                        .WithOne()
                        .HasForeignKey("ChatService.Models.GroupChatRoom", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatService.Models.PrivateChatRoom", b =>
                {
                    b.HasOne("ChatService.Models.ChatRoom", null)
                        .WithOne()
                        .HasForeignKey("ChatService.Models.PrivateChatRoom", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatService.Models.ChatRoom", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("ChatService.Models.Folder", b =>
                {
                    b.Navigation("ChatRooms");
                });

            modelBuilder.Entity("ChatService.Models.GroupChatRoom", b =>
                {
                    b.Navigation("GroupChatMembers");
                });

            modelBuilder.Entity("ChatService.Models.PrivateChatRoom", b =>
                {
                    b.Navigation("UserChatRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
