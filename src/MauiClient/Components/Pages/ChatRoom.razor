@page "/chat/{ChatRoomId:int}"
@using MauiClient.Services
@using Shared.DTOs.Message
@using Shared.DTOs.Chat
@using System.Security.Claims
@inject IChatService ChatService
@inject IMessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@implements IDisposable



@if (!string.IsNullOrEmpty(ChatRoomEmptyMessage))
{
	<p>@ChatRoomEmptyMessage</p>
}
else if (chatRoom == null)
{
	<p>Завантаження даних чату...</p>
}
else
{
	<div class="chat-container">
		<div class="chat-header">
			<div class="left-box">
				<div class="header-text ">@chatRoom.Name</div>
				<div class="functional-text">Was online - 12:55</div>
			</div>
			<div class="right-box">
				<button class="custom-button"><img src="/Images/Search2.svg" alt="Search" /></button>
				<button class="custom-button"><img src="/Images/moreicon.svg" alt="More Options" /></button>
			</div>
		</div>
		<div class="chat-messages custom-scroll" id="chat-messages-container" @ref="messagesContainer">
            @foreach (var message in messages.OrderBy(m => m.CreatedAt))
			{
				<div class="message-item @(message.SenderUserId == currentUserId ? "own-message" : "other-message")">
					<p class="default-text">@message.Content</p>
					<p class="created-at functional-text">@message.CreatedAt.ToString("HH:mm")</p>
					@if (message.IsEdited)
					{
						<span class="edited-mark">Edited</span>
					}
				</div>
			}

			@if (isLoading)
			{
				<div class="loading-indicator">
					<p>Loading more messages...</p>
				</div>
			}
		</div>
		<div class="chat-input">
			<div class="bottom-chat-container">
				<button class="custom-button"><img class="chat-icon" src="/Images/plus.svg" alt="Add" /></button>
				<textarea class="auto-resize" @bind="Text"
				oninput="
					  let minHeight=35;
					  let maxHeight=150;
					  this.style.height='35px' ;
					  if (this.scrollHeight <= minHeight) {
				      // Якщо текст замалий — встановити мінімум
				      this.style.height = minHeight + 'px';
				      this.style.overflowY = 'hidden';
				  } else if (this.scrollHeight <= maxHeight) {
				      // Якщо містимося між 45 і 150
				      this.style.height = this.scrollHeight + 'px';
				      this.style.overflowY = 'hidden';
				  } else {
				      // Якщо більше 150 — залишити 150 і вмикнути скрол
				      this.style.height = maxHeight + 'px';
				      this.style.overflowY = 'auto';
				  }
				"
				placeholder="Type text...">
				</textarea>
				<button class="custom-button" @onclick="SendMessage"><img class="chat-icon" src="/Images/sendicon.svg" alt="Send" /></button>
			</div>
		</div>
	</div>
}

@code {
    [Parameter]
    public int ChatRoomId { get; set; }

    private ElementReference messagesContainer;
    private List<MessageDto> messages = new List<MessageDto>();
    private int currentUserId;
    private bool isLoading = false;
    private bool isFirstLoad = true;
    private int pageSize = 20;
    private int currentPage = 0;
    private int totalMessages = 0;
    private string Text { get; set; } = string.Empty;
    private ChatRoomDto? chatRoom;
    private string ChatRoomEmptyMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user ID (this only needs to happen once)
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
            {
                currentUserId = userId;
            }

            // Connect to SignalR (only once)
            await StartSignalR();
            MessageService.OnNewMessageReceived += HandleNewMessage;

            // Initial loading happens in OnParametersSetAsync
        }
        catch (Exception ex)
        {
            ChatRoomEmptyMessage = $"Помилка завантаження чату: {ex.Message}";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Check if the ChatRoomId has changed
        if (chatRoom == null || chatRoom.Id != ChatRoomId)
        {
            // Reset state
            messages.Clear();
            isFirstLoad = true;
            currentPage = 0;
            ChatRoomEmptyMessage = string.Empty;

            // If already connected to a previous chat, leave it
            if (chatRoom != null)
            {
                await MessageService.LeaveChatRoomAsync(chatRoom.Id);
            }

            try
            {
                // Reload chat room data
                chatRoom = await ChatService.GetPrivateChatRoomAsync(ChatRoomId);
                if (chatRoom == null)
                {
                    ChatRoomEmptyMessage = "Чат не знайдено.";
                    return;
                }

                // Join the new chat room
                await MessageService.JoinChatRoomAsync(ChatRoomId);

                // Reload messages
                totalMessages = (int)await MessageService.GetMessagesCountByChatRoomIdAsync(ChatRoomId);
                await LoadInitialMessages();
            }
            catch (Exception ex)
            {
                ChatRoomEmptyMessage = $"Помилка завантаження чату: {ex.Message}";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("setupScrollListener",
                    messagesContainer, DotNetObjectReference.Create(this));

                if (messages.Any())
                {
                    await ScrollToBottom();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in JS setup: {ex.Message}");
            }
        }

        if (isFirstLoad && messages.Any())
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages-container");
            isFirstLoad = false;
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages-container");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
            // Альтернативный подход если JS функция не найдена
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('chat-messages-container').scrollTop = document.getElementById('chat-messages-container').scrollHeight");
        }
    }

    private async Task LoadInitialMessages()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Загружаем первые сообщения
            var loadedMessages = await MessageService.GetMessagesAsync(ChatRoomId, 0, pageSize);
            Console.WriteLine($"Loaded {loadedMessages.Count()} messages");

            messages.Clear(); // Очищаем на всякий случай
            messages.AddRange(loadedMessages);
            currentPage++;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LoadMoreMessages()
    {
        if (isLoading || currentPage * pageSize >= totalMessages)
            return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var scrollPosition = await JSRuntime.InvokeAsync<double>("getScrollPosition", messagesContainer);

            var loadedMessages = await MessageService.GetMessagesAsync(
                ChatRoomId, currentPage * pageSize, pageSize);

            if (loadedMessages.Any())
            {
                messages.AddRange(loadedMessages);
                currentPage++;

                // Восстанавливаем позицию прокрутки
                await JSRuntime.InvokeVoidAsync("restoreScrollPosition",
                    messagesContainer, scrollPosition);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more messages: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleNewMessage(MessageDto newMessage)
    {
        if (newMessage.ChatRoomId != ChatRoomId)
            return;

        // Проверяем, нет ли уже такого сообщения
        if (!messages.Any(m => m.Id == newMessage.Id))
        {
            messages.Add(newMessage);
            totalMessages++;

            InvokeAsync(async () =>
            {
                StateHasChanged();
                await Task.Delay(100);
                await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages-container");
            });
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(Text) || chatRoom == null)
            return;

        var message = new SendMessageDto
            {
                ChatRoomId = chatRoom.Id,
                Content = Text
            };

        try
        {
            await MessageService.SendMessageAsync(message);
            Text = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }

    private async Task StartSignalR()
    {
        try
        {
            await MessageService.StartConnectionAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            // Пробуем переподключиться через некоторое время
            await Task.Delay(5000);
            await StartSignalR();
        }
    }

    public void Dispose()
    {
        // Отписываемся от событий и покидаем группу чата
        if (MessageService != null)
        {
            MessageService.OnNewMessageReceived -= HandleNewMessage;

            if (chatRoom != null)
            {
                _ = MessageService.LeaveChatRoomAsync(chatRoom.Id);
            }
        }
    }
}